#!/bin/bash

#########################
# Paulo's Dotfiles Repo #
#########################

export DOTFILES=~/dotfiles

function prerequisites() {
	# Packages and things ./setmeup relies on
	echo "First things, first..."
	sudo apt-get update
	sudo apt-get upgrade -y
	sudo apt-get install git -y
	sudo apt-get install curl -y
}

function installations() {
	cd "${DOTFILES}/installations" || exit
	# Installations
	for installation in ./*; do
		echo "üì¶ ‚Üí $installation"
		# Run all
		if [ $2 ]; then
			./"$installation" $1
			continue
		fi
		# Prompt run
		read -p "Run installation? [y/n]"$'\n' -n 1 -r && echo
		if [[ ! $REPLY =~ ^[Yy]$ ]]; then
			echo "Skipped installation..."
		else
			./"$installation" $1
		fi
	done
	cd -
}

function stowem() {
	cd "${DOTFILES}/dotstows" || exit
	echo "Checking for stow..."
	if ! command -v stow &>/dev/null; then
		sudo apt update
		sudo apt install stow -y || exit
	fi

	# env=home,work
	env=$1

	if [ -z "$env" ]; then
		echo 'Environment argument required. (home/work)' && exit
	fi

	# Remove default files
	echo '‚ö†Ô∏è Stow is unable to overwrite source files. You may have to remove defaults manually before running stow.'
	read -p "Remove defaults? [y/n]"$'\n' -n 1 -r && echo
	if [[ ! $REPLY =~ ^[Yy]$ ]]; then
		echo "‚ö†Ô∏è Skipped defaults removal..."
	else
		# TODO: Add more? (expand a bit?)
		rm ~/.bashrc
	fi

	read -n 1 -p "Unstow (y/n)? " answer1
	echo
	if [[ $answer1 =~ ^[Yy]$ ]]; then
		echo 'Unstowing...'

		for stowDir in */; do
			echo "üóëÔ∏è Unstowing ${stowDir}"
			stow -D "$stowDir"

			if [ $? -eq 0 ]; then
				echo OK
			else
				echo FAIL
			fi
		done
	fi

	read -n 1 -p "Stow (y/n)? " answer2
	echo
	if [[ $answer2 =~ ^[Yy]$ ]]; then
		echo -e 'Stowing...'

		for stowDir in */; do
			stowDirPath="./${stowDir}${env}"
			if [ -d "$stowDirPath" ]; then
				cd "$stowDir" || exit
				echo "--> Stowing ${stowDir} for env '${env}'..."
				stow -vSt ~ "$env"
				cd - || exit
			else
				echo "--> Stowing ${stowDir} without env..."
				stow -vSt ~ "$stowDir"
			fi

			if [ $? -eq 0 ]; then
				echo OK
			else
				echo FAIL
			fi
		done
	fi
	cd -
}

function postinstallations() {
	vim +'PlugInstall --sync' +qa
	echo "Ignore .vimrc erorrs, installed plugins restart vim!"
	# PLEASE FIX THIS EVENTUALLY
	echo "Tmux conf file Dos issue patch..."
	dos2unix "$DOTFILES/dotstows/tmux/.tmux.conf"
}

envs=("home" "work")
echo "Choose environment:"
select env in "${envs[@]}"; do
	case $env in
	"home")
		echo "Starting setup for 'home' environmment."
		break
		;;
	"work")
		echo "Starting setup for 'work' environmment."
		break
		;;
	esac
done

read -p "üöß Run prerequisites? [y/n] "$'\n' answer2
case ${answer2:0:1} in
y | Y)
	prerequisites
	;;
*)
	echo " Skipped! Some installations might not work!"
	;;
esac

read -p "üîó Run stows? [y/n] "$'\n' answer2
case ${answer2:0:1} in
y | Y)
	stowem $env
	;;
*)
	echo "Skipped stows..."
	;;
esac

read -p "üöÄ Run installations? [y/n/a]"$'\n' answer
case ${answer:0:1} in
y | Y)
	installations $env
	;;
a | A)
	installations $env true
	;;
*)
	echo "‚ö† Skipped installations..."
	;;
esac

read -p "‚öôÔ∏è Run post-installations? [y/n] "$'\n' answer3
case ${answer3:0:1} in
y | Y)
	postinstallations $env
	;;
*)
	echo "Skipped post-installations..."
	;;
esac
